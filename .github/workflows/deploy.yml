name: dustinvorac.com

on:
  push:
    branches:
      - main

env:
  TF_VAR_region: ${{ secrets.AWS_REGION }}
  TF_VAR_apex_domain: ${{ secrets.AWS_DOMAIN }}
  TF_VAR_role: ${{ secrets.AWS_IAM_ROLE }}
  TF_VAR_state_bucket: ${{ secrets.AWS_TF_STATE_BUCKET }}
  TF_VAR_state_key: ${{ secrets.AWS_TF_STATE_KEY }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra
    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo
    steps:
      - name: clone
        uses: actions/checkout@v3
      - name: tf setup
        uses: hashicorp/setup-terraform@v1.2.1
      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.TF_VAR_region }}
          role-to-assume: ${{ env.TF_VAR_role }}
          role-duration-seconds: 900
      - name: tf init
        timeout-minutes: 2
        run: |
          terraform init \
              -input=false \
              -backend=true \
              -backend-config="region=${{ env.TF_VAR_region }}" \
              -backend-config="bucket=${{ env.TF_VAR_state_bucket }}" \
              -backend-config="key=${{ env.TF_VAR_state_key }}" \
              -reconfigure
      # - name: tf format
      #   run: terraform fmt -check
      - name: tf plan
        run: terraform plan -out=terraform.plan
      - name: tf apply
        run: terraform apply -auto-approve terraform.plan
      - name: tf outputs
        id: results
        run: |
          bucket=${terraform-bin output aws_bucket}
          cloudfront=${terraform-bin output aws_cloudfront_distribution}
          echo $bucket $cloudfront
          echo "::set-output name=bucket::$bucket name=cloudfront::$cloudfront"
    outputs:
      bucket: ${{ steps.results.outputs.bucket }}
      cloudfront: ${{ steps.results.outputs.cloudfront }}

  web:
    runs-on: ubuntu-latest
    needs: terraform
    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo
    steps:
      - name: clone
        uses: actions/checkout@v3
      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.TF_VAR_region }}
          role-to-assume: ${{ env.TF_VAR_role }}
          role-duration-seconds: 900
      - name: yarn
        run: yarn --frozen-lockfile
      - name: build
        run: yarn run build
      - name: s3 sync
        run: aws s3 sync ./dist/ s3://${{ needs.terraform.outputs.bucket }}
      - name: cloudfront invalidate
        run: aws cloudfront create-invalidation --distribution-id ${{ needs.terraform.outputs.cloudfront }} --paths "/*"